package proto

import (
	"fmt"

	capnp "capnproto.org/go/capnp/v3"
	"github.com/stretchr/testify/assert"
	"github.com/vercel/turbo/cli/internal/xxhash"
	"testing"
)

// Code generated by capnpc-go. DO NOT EDIT.

func Test_CapnpHash(t *testing.T) {
	arena := capnp.SingleSegment(nil)

	_, seg, err := capnp.NewMessage(arena)
	if err != nil {
		panic(err)
	}

	task, err := NewRootTaskHashable(seg)
	if err != nil {
		panic(err)
	}

	task.SetGlobalHash("global_hash")
	task.SetPackageDir("package_dir")
	task.SetHashOfFiles("hash_of_files")
	task.SetExternalDepsHash("external_deps_hash")
	task.SetTask("task")
	task.SetEnvMode(TaskHashable_EnvMode_infer)

	{
		arena := capnp.SingleSegment(nil)
		_, seg, _ := capnp.NewMessage(arena)
		deps, _ := NewTaskOutputs(seg)

		list, _ := capnp.NewTextList(seg, 1)
		list.Set(0, "inclusions")
		deps.SetInclusions(list)

		list, _ = capnp.NewTextList(seg, 1)
		list.Set(0, "exclusions")
		deps.SetExclusions(list)

		task.SetOutputs(deps)

	}

	list, _ := capnp.NewTextList(seg, 1)
	list.Set(0, "task_dependency_hash")
	task.SetTaskDependencyHashes(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "pass_thru_args")
	task.SetPassThruArgs(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "env")
	task.SetEnv(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "pass_thru_env")
	task.SetPassThruEnv(list)

	list, _ = capnp.NewTextList(seg, 1)
	list.Set(0, "dotenv")
	task.SetDotEnv(list)

	list, _ = capnp.NewTextList(seg, 0)
	task.SetResolvedEnvVars(list)

	bytes, _ := task.Message().Marshal()

	digest := xxhash.New()
	digest.Write(bytes)
	out := digest.Sum64()

	outStr := fmt.Sprintf("%x", out)

	// this hash must be the same as the rust impl
	assert.Equal(t, "5b222af1dea5828e", outStr)
}
